'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "ecs",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class ECSClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultECSHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class ECSServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, ECSServiceException.prototype);
    }
}

const AcceleratorManufacturer = {
    AMAZON_WEB_SERVICES: "amazon-web-services",
    AMD: "amd",
    HABANA: "habana",
    NVIDIA: "nvidia",
    XILINX: "xilinx",
};
const AcceleratorName = {
    A100: "a100",
    A10G: "a10g",
    H100: "h100",
    INFERENTIA: "inferentia",
    K520: "k520",
    K80: "k80",
    M60: "m60",
    RADEON_PRO_V520: "radeon-pro-v520",
    T4: "t4",
    T4G: "t4g",
    V100: "v100",
    VU9P: "vu9p",
};
const AcceleratorType = {
    FPGA: "fpga",
    GPU: "gpu",
    INFERENCE: "inference",
};
class AccessDeniedException extends ECSServiceException {
    name = "AccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
const AgentUpdateStatus = {
    FAILED: "FAILED",
    PENDING: "PENDING",
    STAGED: "STAGED",
    STAGING: "STAGING",
    UPDATED: "UPDATED",
    UPDATING: "UPDATING",
};
class ClientException extends ECSServiceException {
    name = "ClientException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ClientException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ClientException.prototype);
    }
}
class ClusterNotFoundException extends ECSServiceException {
    name = "ClusterNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ClusterNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ClusterNotFoundException.prototype);
    }
}
const ManagedDraining = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const ManagedScalingStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const ManagedTerminationProtection = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const BareMetal = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
const BurstablePerformance = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
const CpuManufacturer = {
    AMAZON_WEB_SERVICES: "amazon-web-services",
    AMD: "amd",
    INTEL: "intel",
};
const InstanceGeneration = {
    CURRENT: "current",
    PREVIOUS: "previous",
};
const LocalStorage = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
const LocalStorageType = {
    HDD: "hdd",
    SSD: "ssd",
};
const ManagedInstancesMonitoringOptions = {
    BASIC: "BASIC",
    DETAILED: "DETAILED",
};
const PropagateMITags = {
    CAPACITY_PROVIDER: "CAPACITY_PROVIDER",
    NONE: "NONE",
};
const CapacityProviderStatus = {
    ACTIVE: "ACTIVE",
    DEPROVISIONING: "DEPROVISIONING",
    INACTIVE: "INACTIVE",
    PROVISIONING: "PROVISIONING",
};
const CapacityProviderType = {
    EC2_AUTOSCALING: "EC2_AUTOSCALING",
    FARGATE: "FARGATE",
    FARGATE_SPOT: "FARGATE_SPOT",
    MANAGED_INSTANCES: "MANAGED_INSTANCES",
};
const CapacityProviderUpdateStatus = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETE_COMPLETE: "DELETE_COMPLETE",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    UPDATE_COMPLETE: "UPDATE_COMPLETE",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
};
class InvalidParameterException extends ECSServiceException {
    name = "InvalidParameterException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
class LimitExceededException extends ECSServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class ServerException extends ECSServiceException {
    name = "ServerException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "ServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServerException.prototype);
    }
}
class UnsupportedFeatureException extends ECSServiceException {
    name = "UnsupportedFeatureException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedFeatureException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedFeatureException.prototype);
    }
}
class UpdateInProgressException extends ECSServiceException {
    name = "UpdateInProgressException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UpdateInProgressException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UpdateInProgressException.prototype);
    }
}
const ExecuteCommandLogging = {
    DEFAULT: "DEFAULT",
    NONE: "NONE",
    OVERRIDE: "OVERRIDE",
};
const ClusterSettingName = {
    CONTAINER_INSIGHTS: "containerInsights",
};
class NamespaceNotFoundException extends ECSServiceException {
    name = "NamespaceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NamespaceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NamespaceNotFoundException.prototype);
    }
}
const AvailabilityZoneRebalancing = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const DeploymentLifecycleHookStage = {
    POST_PRODUCTION_TRAFFIC_SHIFT: "POST_PRODUCTION_TRAFFIC_SHIFT",
    POST_SCALE_UP: "POST_SCALE_UP",
    POST_TEST_TRAFFIC_SHIFT: "POST_TEST_TRAFFIC_SHIFT",
    PRE_SCALE_UP: "PRE_SCALE_UP",
    PRODUCTION_TRAFFIC_SHIFT: "PRODUCTION_TRAFFIC_SHIFT",
    RECONCILE_SERVICE: "RECONCILE_SERVICE",
    TEST_TRAFFIC_SHIFT: "TEST_TRAFFIC_SHIFT",
};
const DeploymentStrategy = {
    BLUE_GREEN: "BLUE_GREEN",
    CANARY: "CANARY",
    LINEAR: "LINEAR",
    ROLLING: "ROLLING",
};
const DeploymentControllerType = {
    CODE_DEPLOY: "CODE_DEPLOY",
    ECS: "ECS",
    EXTERNAL: "EXTERNAL",
};
const LaunchType = {
    EC2: "EC2",
    EXTERNAL: "EXTERNAL",
    FARGATE: "FARGATE",
    MANAGED_INSTANCES: "MANAGED_INSTANCES",
};
const AssignPublicIp = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const PlacementConstraintType = {
    DISTINCT_INSTANCE: "distinctInstance",
    MEMBER_OF: "memberOf",
};
const PlacementStrategyType = {
    BINPACK: "binpack",
    RANDOM: "random",
    SPREAD: "spread",
};
const PropagateTags = {
    NONE: "NONE",
    SERVICE: "SERVICE",
    TASK_DEFINITION: "TASK_DEFINITION",
};
const SchedulingStrategy = {
    DAEMON: "DAEMON",
    REPLICA: "REPLICA",
};
const ServiceConnectAccessLoggingFormat = {
    JSON: "JSON",
    TEXT: "TEXT",
};
const ServiceConnectIncludeQueryParameters = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const LogDriver = {
    AWSFIRELENS: "awsfirelens",
    AWSLOGS: "awslogs",
    FLUENTD: "fluentd",
    GELF: "gelf",
    JOURNALD: "journald",
    JSON_FILE: "json-file",
    SPLUNK: "splunk",
    SYSLOG: "syslog",
};
const TaskFilesystemType = {
    EXT3: "ext3",
    EXT4: "ext4",
    NTFS: "ntfs",
    XFS: "xfs",
};
const EBSResourceType = {
    VOLUME: "volume",
};
const DeploymentRolloutState = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
const ScaleUnit = {
    PERCENT: "PERCENT",
};
const StabilityStatus = {
    STABILIZING: "STABILIZING",
    STEADY_STATE: "STEADY_STATE",
};
class PlatformTaskDefinitionIncompatibilityException extends ECSServiceException {
    name = "PlatformTaskDefinitionIncompatibilityException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PlatformTaskDefinitionIncompatibilityException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PlatformTaskDefinitionIncompatibilityException.prototype);
    }
}
class PlatformUnknownException extends ECSServiceException {
    name = "PlatformUnknownException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PlatformUnknownException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PlatformUnknownException.prototype);
    }
}
class ServiceNotActiveException extends ECSServiceException {
    name = "ServiceNotActiveException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ServiceNotActiveException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceNotActiveException.prototype);
    }
}
class ServiceNotFoundException extends ECSServiceException {
    name = "ServiceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ServiceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceNotFoundException.prototype);
    }
}
const SettingName = {
    AWSVPC_TRUNKING: "awsvpcTrunking",
    CONTAINER_INSIGHTS: "containerInsights",
    CONTAINER_INSTANCE_LONG_ARN_FORMAT: "containerInstanceLongArnFormat",
    DEFAULT_LOG_DRIVER_MODE: "defaultLogDriverMode",
    FARGATE_FIPS_MODE: "fargateFIPSMode",
    FARGATE_TASK_RETIREMENT_WAIT_PERIOD: "fargateTaskRetirementWaitPeriod",
    GUARD_DUTY_ACTIVATE: "guardDutyActivate",
    SERVICE_LONG_ARN_FORMAT: "serviceLongArnFormat",
    TAG_RESOURCE_AUTHORIZATION: "tagResourceAuthorization",
    TASK_LONG_ARN_FORMAT: "taskLongArnFormat",
};
const SettingType = {
    AWS_MANAGED: "aws_managed",
    USER: "user",
};
const TargetType = {
    CONTAINER_INSTANCE: "container-instance",
};
class TargetNotFoundException extends ECSServiceException {
    name = "TargetNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TargetNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TargetNotFoundException.prototype);
    }
}
class ClusterContainsCapacityProviderException extends ECSServiceException {
    name = "ClusterContainsCapacityProviderException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ClusterContainsCapacityProviderException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ClusterContainsCapacityProviderException.prototype);
    }
}
class ClusterContainsContainerInstancesException extends ECSServiceException {
    name = "ClusterContainsContainerInstancesException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ClusterContainsContainerInstancesException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ClusterContainsContainerInstancesException.prototype);
    }
}
class ClusterContainsServicesException extends ECSServiceException {
    name = "ClusterContainsServicesException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ClusterContainsServicesException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ClusterContainsServicesException.prototype);
    }
}
class ClusterContainsTasksException extends ECSServiceException {
    name = "ClusterContainsTasksException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ClusterContainsTasksException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ClusterContainsTasksException.prototype);
    }
}
const Compatibility = {
    EC2: "EC2",
    EXTERNAL: "EXTERNAL",
    FARGATE: "FARGATE",
    MANAGED_INSTANCES: "MANAGED_INSTANCES",
};
const ContainerCondition = {
    COMPLETE: "COMPLETE",
    HEALTHY: "HEALTHY",
    START: "START",
    SUCCESS: "SUCCESS",
};
const EnvironmentFileType = {
    S3: "s3",
};
const FirelensConfigurationType = {
    FLUENTBIT: "fluentbit",
    FLUENTD: "fluentd",
};
const DeviceCgroupPermission = {
    MKNOD: "mknod",
    READ: "read",
    WRITE: "write",
};
const ApplicationProtocol = {
    GRPC: "grpc",
    HTTP: "http",
    HTTP2: "http2",
};
const TransportProtocol = {
    TCP: "tcp",
    UDP: "udp",
};
const ResourceType = {
    GPU: "GPU",
    INFERENCE_ACCELERATOR: "InferenceAccelerator",
};
const UlimitName = {
    CORE: "core",
    CPU: "cpu",
    DATA: "data",
    FSIZE: "fsize",
    LOCKS: "locks",
    MEMLOCK: "memlock",
    MSGQUEUE: "msgqueue",
    NICE: "nice",
    NOFILE: "nofile",
    NPROC: "nproc",
    RSS: "rss",
    RTPRIO: "rtprio",
    RTTIME: "rttime",
    SIGPENDING: "sigpending",
    STACK: "stack",
};
const VersionConsistency = {
    DISABLED: "disabled",
    ENABLED: "enabled",
};
const IpcMode = {
    HOST: "host",
    NONE: "none",
    TASK: "task",
};
const NetworkMode = {
    AWSVPC: "awsvpc",
    BRIDGE: "bridge",
    HOST: "host",
    NONE: "none",
};
const PidMode = {
    HOST: "host",
    TASK: "task",
};
const TaskDefinitionPlacementConstraintType = {
    MEMBER_OF: "memberOf",
};
const ProxyConfigurationType = {
    APPMESH: "APPMESH",
};
const CPUArchitecture = {
    ARM64: "ARM64",
    X86_64: "X86_64",
};
const OSFamily = {
    LINUX: "LINUX",
    WINDOWS_SERVER_2004_CORE: "WINDOWS_SERVER_2004_CORE",
    WINDOWS_SERVER_2016_FULL: "WINDOWS_SERVER_2016_FULL",
    WINDOWS_SERVER_2019_CORE: "WINDOWS_SERVER_2019_CORE",
    WINDOWS_SERVER_2019_FULL: "WINDOWS_SERVER_2019_FULL",
    WINDOWS_SERVER_2022_CORE: "WINDOWS_SERVER_2022_CORE",
    WINDOWS_SERVER_2022_FULL: "WINDOWS_SERVER_2022_FULL",
    WINDOWS_SERVER_2025_CORE: "WINDOWS_SERVER_2025_CORE",
    WINDOWS_SERVER_2025_FULL: "WINDOWS_SERVER_2025_FULL",
    WINDOWS_SERVER_20H2_CORE: "WINDOWS_SERVER_20H2_CORE",
};
const TaskDefinitionStatus = {
    ACTIVE: "ACTIVE",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    INACTIVE: "INACTIVE",
};
const Scope = {
    SHARED: "shared",
    TASK: "task",
};
const EFSAuthorizationConfigIAM = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const EFSTransitEncryption = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
class TaskSetNotFoundException extends ECSServiceException {
    name = "TaskSetNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TaskSetNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TaskSetNotFoundException.prototype);
    }
}
const InstanceHealthCheckState = {
    IMPAIRED: "IMPAIRED",
    INITIALIZING: "INITIALIZING",
    INSUFFICIENT_DATA: "INSUFFICIENT_DATA",
    OK: "OK",
};
const InstanceHealthCheckType = {
    CONTAINER_RUNTIME: "CONTAINER_RUNTIME",
};
const CapacityProviderField = {
    TAGS: "TAGS",
};
const ClusterField = {
    ATTACHMENTS: "ATTACHMENTS",
    CONFIGURATIONS: "CONFIGURATIONS",
    SETTINGS: "SETTINGS",
    STATISTICS: "STATISTICS",
    TAGS: "TAGS",
};
const ContainerInstanceField = {
    CONTAINER_INSTANCE_HEALTH: "CONTAINER_INSTANCE_HEALTH",
    TAGS: "TAGS",
};
const ServiceDeploymentRollbackMonitorsStatus = {
    DISABLED: "DISABLED",
    MONITORING: "MONITORING",
    MONITORING_COMPLETE: "MONITORING_COMPLETE",
    TRIGGERED: "TRIGGERED",
};
const ServiceDeploymentLifecycleStage = {
    BAKE_TIME: "BAKE_TIME",
    CLEAN_UP: "CLEAN_UP",
    POST_PRODUCTION_TRAFFIC_SHIFT: "POST_PRODUCTION_TRAFFIC_SHIFT",
    POST_SCALE_UP: "POST_SCALE_UP",
    POST_TEST_TRAFFIC_SHIFT: "POST_TEST_TRAFFIC_SHIFT",
    PRE_SCALE_UP: "PRE_SCALE_UP",
    PRODUCTION_TRAFFIC_SHIFT: "PRODUCTION_TRAFFIC_SHIFT",
    RECONCILE_SERVICE: "RECONCILE_SERVICE",
    SCALE_UP: "SCALE_UP",
    TEST_TRAFFIC_SHIFT: "TEST_TRAFFIC_SHIFT",
};
const ServiceDeploymentStatus = {
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
    ROLLBACK_FAILED: "ROLLBACK_FAILED",
    ROLLBACK_IN_PROGRESS: "ROLLBACK_IN_PROGRESS",
    ROLLBACK_REQUESTED: "ROLLBACK_REQUESTED",
    ROLLBACK_SUCCESSFUL: "ROLLBACK_SUCCESSFUL",
    STOPPED: "STOPPED",
    STOP_REQUESTED: "STOP_REQUESTED",
    SUCCESSFUL: "SUCCESSFUL",
};
const ServiceField = {
    TAGS: "TAGS",
};
const TaskDefinitionField = {
    TAGS: "TAGS",
};
const TaskField = {
    TAGS: "TAGS",
};
const Connectivity = {
    CONNECTED: "CONNECTED",
    DISCONNECTED: "DISCONNECTED",
};
const HealthStatus = {
    HEALTHY: "HEALTHY",
    UNHEALTHY: "UNHEALTHY",
    UNKNOWN: "UNKNOWN",
};
const ManagedAgentName = {
    ExecuteCommandAgent: "ExecuteCommandAgent",
};
const TaskStopCode = {
    ESSENTIAL_CONTAINER_EXITED: "EssentialContainerExited",
    SERVICE_SCHEDULER_INITIATED: "ServiceSchedulerInitiated",
    SPOT_INTERRUPTION: "SpotInterruption",
    TASK_FAILED_TO_START: "TaskFailedToStart",
    TERMINATION_NOTICE: "TerminationNotice",
    USER_INITIATED: "UserInitiated",
};
const TaskSetField = {
    TAGS: "TAGS",
};
class TargetNotConnectedException extends ECSServiceException {
    name = "TargetNotConnectedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TargetNotConnectedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TargetNotConnectedException.prototype);
    }
}
class ResourceNotFoundException extends ECSServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
const ContainerInstanceStatus = {
    ACTIVE: "ACTIVE",
    DEREGISTERING: "DEREGISTERING",
    DRAINING: "DRAINING",
    REGISTERING: "REGISTERING",
    REGISTRATION_FAILED: "REGISTRATION_FAILED",
};
const TaskDefinitionFamilyStatus = {
    ACTIVE: "ACTIVE",
    ALL: "ALL",
    INACTIVE: "INACTIVE",
};
const SortOrder = {
    ASC: "ASC",
    DESC: "DESC",
};
const SessionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tokenValue && { tokenValue: smithyClient.SENSITIVE_STRING }),
});
const ExecuteCommandResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.session && { session: SessionFilterSensitiveLog(obj.session) }),
});

const DesiredStatus = {
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
};
class AttributeLimitExceededException extends ECSServiceException {
    name = "AttributeLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AttributeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AttributeLimitExceededException.prototype);
    }
}
class ResourceInUseException extends ECSServiceException {
    name = "ResourceInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
const PlatformDeviceType = {
    GPU: "GPU",
};
class BlockedException extends ECSServiceException {
    name = "BlockedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "BlockedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BlockedException.prototype);
    }
}
class ConflictException extends ECSServiceException {
    name = "ConflictException";
    $fault = "client";
    resourceIds;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.resourceIds = opts.resourceIds;
    }
}
class ServiceDeploymentNotFoundException extends ECSServiceException {
    name = "ServiceDeploymentNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ServiceDeploymentNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceDeploymentNotFoundException.prototype);
    }
}
const StopServiceDeploymentStopType = {
    ABORT: "ABORT",
    ROLLBACK: "ROLLBACK",
};
class MissingVersionException extends ECSServiceException {
    name = "MissingVersionException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "MissingVersionException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MissingVersionException.prototype);
    }
}
class NoUpdateAvailableException extends ECSServiceException {
    name = "NoUpdateAvailableException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoUpdateAvailableException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoUpdateAvailableException.prototype);
    }
}

const se_CreateCapacityProviderCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCapacityProvider");
    let body;
    body = JSON.stringify(se_CreateCapacityProviderRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateClusterCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCluster");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateServiceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateService");
    let body;
    body = JSON.stringify(se_CreateServiceRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTaskSetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTaskSet");
    let body;
    body = JSON.stringify(se_CreateTaskSetRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAccountSettingCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAccountSetting");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAttributes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteCapacityProviderCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCapacityProvider");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteClusterCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCluster");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteServiceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteService");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTaskDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTaskDefinitions");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTaskSetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTaskSet");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterContainerInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterContainerInstance");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterTaskDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterTaskDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCapacityProvidersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCapacityProviders");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeClustersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeClusters");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeContainerInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeContainerInstances");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeServiceDeploymentsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeServiceDeployments");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeServiceRevisionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeServiceRevisions");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeServicesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeServices");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTaskDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTaskDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTasksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTasks");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTaskSetsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTaskSets");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DiscoverPollEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DiscoverPollEndpoint");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ExecuteCommandCommand = async (input, context) => {
    const headers = sharedHeaders("ExecuteCommand");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTaskProtectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetTaskProtection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAccountSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAccountSettings");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAttributes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListClustersCommand = async (input, context) => {
    const headers = sharedHeaders("ListClusters");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListContainerInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("ListContainerInstances");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListServiceDeploymentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListServiceDeployments");
    let body;
    body = JSON.stringify(se_ListServiceDeploymentsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListServicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListServices");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListServicesByNamespaceCommand = async (input, context) => {
    const headers = sharedHeaders("ListServicesByNamespace");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTaskDefinitionFamiliesCommand = async (input, context) => {
    const headers = sharedHeaders("ListTaskDefinitionFamilies");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTaskDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTaskDefinitions");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTasksCommand = async (input, context) => {
    const headers = sharedHeaders("ListTasks");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutAccountSettingCommand = async (input, context) => {
    const headers = sharedHeaders("PutAccountSetting");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutAccountSettingDefaultCommand = async (input, context) => {
    const headers = sharedHeaders("PutAccountSettingDefault");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("PutAttributes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutClusterCapacityProvidersCommand = async (input, context) => {
    const headers = sharedHeaders("PutClusterCapacityProviders");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterContainerInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterContainerInstance");
    let body;
    body = JSON.stringify(se_RegisterContainerInstanceRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterTaskDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterTaskDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RunTaskCommand = async (input, context) => {
    const headers = sharedHeaders("RunTask");
    let body;
    body = JSON.stringify(se_RunTaskRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartTaskCommand = async (input, context) => {
    const headers = sharedHeaders("StartTask");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopServiceDeploymentCommand = async (input, context) => {
    const headers = sharedHeaders("StopServiceDeployment");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopTaskCommand = async (input, context) => {
    const headers = sharedHeaders("StopTask");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SubmitAttachmentStateChangesCommand = async (input, context) => {
    const headers = sharedHeaders("SubmitAttachmentStateChanges");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SubmitContainerStateChangeCommand = async (input, context) => {
    const headers = sharedHeaders("SubmitContainerStateChange");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SubmitTaskStateChangeCommand = async (input, context) => {
    const headers = sharedHeaders("SubmitTaskStateChange");
    let body;
    body = JSON.stringify(se_SubmitTaskStateChangeRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateCapacityProviderCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCapacityProvider");
    let body;
    body = JSON.stringify(se_UpdateCapacityProviderRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateClusterCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCluster");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateClusterSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateClusterSettings");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateContainerAgentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateContainerAgent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateContainerInstancesStateCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateContainerInstancesState");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateServiceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateService");
    let body;
    body = JSON.stringify(se_UpdateServiceRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateServicePrimaryTaskSetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateServicePrimaryTaskSet");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateTaskProtectionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTaskProtection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateTaskSetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTaskSet");
    let body;
    body = JSON.stringify(se_UpdateTaskSetRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_CreateCapacityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateCapacityProviderResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateServiceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTaskSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateTaskSetResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteAccountSettingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteCapacityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteCapacityProviderResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteServiceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTaskDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteTaskDefinitionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTaskSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteTaskSetResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterContainerInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeregisterContainerInstanceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterTaskDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeregisterTaskDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCapacityProvidersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityProvidersResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeContainerInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeContainerInstancesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeServiceDeploymentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeServiceDeploymentsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeServiceRevisionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeServiceRevisionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeServicesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTaskDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeTaskDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeTasksResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTaskSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeTaskSetsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DiscoverPollEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExecuteCommandCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTaskProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetTaskProtectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAccountSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListContainerInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListServiceDeploymentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListServiceDeploymentsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListServicesByNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTaskDefinitionFamiliesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTaskDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutAccountSettingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutAccountSettingDefaultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutClusterCapacityProvidersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterContainerInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_RegisterContainerInstanceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterTaskDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_RegisterTaskDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RunTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_RunTaskResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartTaskResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopServiceDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StopTaskResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SubmitAttachmentStateChangesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SubmitContainerStateChangeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SubmitTaskStateChangeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateCapacityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateCapacityProviderResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateClusterSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateContainerAgentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateContainerAgentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateContainerInstancesStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateContainerInstancesStateResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateServiceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateServicePrimaryTaskSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateServicePrimaryTaskSetResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTaskProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateTaskProtectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTaskSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateTaskSetResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.ecs#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput);
        case "UnsupportedFeatureException":
        case "com.amazonaws.ecs#UnsupportedFeatureException":
            throw await de_UnsupportedFeatureExceptionRes(parsedOutput);
        case "UpdateInProgressException":
        case "com.amazonaws.ecs#UpdateInProgressException":
            throw await de_UpdateInProgressExceptionRes(parsedOutput);
        case "NamespaceNotFoundException":
        case "com.amazonaws.ecs#NamespaceNotFoundException":
            throw await de_NamespaceNotFoundExceptionRes(parsedOutput);
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput);
        case "PlatformTaskDefinitionIncompatibilityException":
        case "com.amazonaws.ecs#PlatformTaskDefinitionIncompatibilityException":
            throw await de_PlatformTaskDefinitionIncompatibilityExceptionRes(parsedOutput);
        case "PlatformUnknownException":
        case "com.amazonaws.ecs#PlatformUnknownException":
            throw await de_PlatformUnknownExceptionRes(parsedOutput);
        case "ServiceNotActiveException":
        case "com.amazonaws.ecs#ServiceNotActiveException":
            throw await de_ServiceNotActiveExceptionRes(parsedOutput);
        case "ServiceNotFoundException":
        case "com.amazonaws.ecs#ServiceNotFoundException":
            throw await de_ServiceNotFoundExceptionRes(parsedOutput);
        case "TargetNotFoundException":
        case "com.amazonaws.ecs#TargetNotFoundException":
            throw await de_TargetNotFoundExceptionRes(parsedOutput);
        case "ClusterContainsCapacityProviderException":
        case "com.amazonaws.ecs#ClusterContainsCapacityProviderException":
            throw await de_ClusterContainsCapacityProviderExceptionRes(parsedOutput);
        case "ClusterContainsContainerInstancesException":
        case "com.amazonaws.ecs#ClusterContainsContainerInstancesException":
            throw await de_ClusterContainsContainerInstancesExceptionRes(parsedOutput);
        case "ClusterContainsServicesException":
        case "com.amazonaws.ecs#ClusterContainsServicesException":
            throw await de_ClusterContainsServicesExceptionRes(parsedOutput);
        case "ClusterContainsTasksException":
        case "com.amazonaws.ecs#ClusterContainsTasksException":
            throw await de_ClusterContainsTasksExceptionRes(parsedOutput);
        case "TaskSetNotFoundException":
        case "com.amazonaws.ecs#TaskSetNotFoundException":
            throw await de_TaskSetNotFoundExceptionRes(parsedOutput);
        case "TargetNotConnectedException":
        case "com.amazonaws.ecs#TargetNotConnectedException":
            throw await de_TargetNotConnectedExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.ecs#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "AttributeLimitExceededException":
        case "com.amazonaws.ecs#AttributeLimitExceededException":
            throw await de_AttributeLimitExceededExceptionRes(parsedOutput);
        case "ResourceInUseException":
        case "com.amazonaws.ecs#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput);
        case "BlockedException":
        case "com.amazonaws.ecs#BlockedException":
            throw await de_BlockedExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.ecs#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "ServiceDeploymentNotFoundException":
        case "com.amazonaws.ecs#ServiceDeploymentNotFoundException":
            throw await de_ServiceDeploymentNotFoundExceptionRes(parsedOutput);
        case "MissingVersionException":
        case "com.amazonaws.ecs#MissingVersionException":
            throw await de_MissingVersionExceptionRes(parsedOutput);
        case "NoUpdateAvailableException":
        case "com.amazonaws.ecs#NoUpdateAvailableException":
            throw await de_NoUpdateAvailableExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_AttributeLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AttributeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_BlockedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new BlockedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ClientExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ClusterContainsCapacityProviderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ClusterContainsCapacityProviderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ClusterContainsContainerInstancesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ClusterContainsContainerInstancesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ClusterContainsServicesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ClusterContainsServicesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ClusterContainsTasksExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ClusterContainsTasksException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ClusterNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ClusterNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_MissingVersionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new MissingVersionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_NamespaceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new NamespaceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_NoUpdateAvailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new NoUpdateAvailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PlatformTaskDefinitionIncompatibilityExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new PlatformTaskDefinitionIncompatibilityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PlatformUnknownExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new PlatformUnknownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceDeploymentNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceDeploymentNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceNotActiveExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceNotActiveException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TargetNotConnectedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TargetNotConnectedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TargetNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TargetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TaskSetNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TaskSetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedFeatureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedFeatureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UpdateInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UpdateInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_CanaryConfiguration = (input, context) => {
    return smithyClient.take(input, {
        canaryBakeTimeInMinutes: [],
        canaryPercent: smithyClient.serializeFloat,
    });
};
const se_CreateCapacityProviderRequest = (input, context) => {
    return smithyClient.take(input, {
        autoScalingGroupProvider: smithyClient._json,
        cluster: [],
        managedInstancesProvider: (_) => se_CreateManagedInstancesProviderConfiguration(_),
        name: [],
        tags: smithyClient._json,
    });
};
const se_CreatedAt = (input, context) => {
    return smithyClient.take(input, {
        after: (_) => _.getTime() / 1_000,
        before: (_) => _.getTime() / 1_000,
    });
};
const se_CreateManagedInstancesProviderConfiguration = (input, context) => {
    return smithyClient.take(input, {
        infrastructureRoleArn: [],
        instanceLaunchTemplate: (_) => se_InstanceLaunchTemplate(_),
        propagateTags: [],
    });
};
const se_CreateServiceRequest = (input, context) => {
    return smithyClient.take(input, {
        availabilityZoneRebalancing: [],
        capacityProviderStrategy: smithyClient._json,
        clientToken: [],
        cluster: [],
        deploymentConfiguration: (_) => se_DeploymentConfiguration(_),
        deploymentController: smithyClient._json,
        desiredCount: [],
        enableECSManagedTags: [],
        enableExecuteCommand: [],
        healthCheckGracePeriodSeconds: [],
        launchType: [],
        loadBalancers: smithyClient._json,
        networkConfiguration: smithyClient._json,
        placementConstraints: smithyClient._json,
        placementStrategy: smithyClient._json,
        platformVersion: [],
        propagateTags: [],
        role: [],
        schedulingStrategy: [],
        serviceConnectConfiguration: smithyClient._json,
        serviceName: [],
        serviceRegistries: smithyClient._json,
        tags: smithyClient._json,
        taskDefinition: [],
        volumeConfigurations: smithyClient._json,
        vpcLatticeConfigurations: smithyClient._json,
    });
};
const se_CreateTaskSetRequest = (input, context) => {
    return smithyClient.take(input, {
        capacityProviderStrategy: smithyClient._json,
        clientToken: [],
        cluster: [],
        externalId: [],
        launchType: [],
        loadBalancers: smithyClient._json,
        networkConfiguration: smithyClient._json,
        platformVersion: [],
        scale: (_) => se_Scale(_),
        service: [],
        serviceRegistries: smithyClient._json,
        tags: smithyClient._json,
        taskDefinition: [],
    });
};
const se_DeploymentConfiguration = (input, context) => {
    return smithyClient.take(input, {
        alarms: smithyClient._json,
        bakeTimeInMinutes: [],
        canaryConfiguration: (_) => se_CanaryConfiguration(_),
        deploymentCircuitBreaker: smithyClient._json,
        lifecycleHooks: (_) => se_DeploymentLifecycleHookList(_),
        linearConfiguration: (_) => se_LinearConfiguration(_),
        maximumPercent: [],
        minimumHealthyPercent: [],
        strategy: [],
    });
};
const se_DeploymentLifecycleHook = (input, context) => {
    return smithyClient.take(input, {
        hookDetails: (_) => se_HookDetails(_),
        hookTargetArn: [],
        lifecycleStages: smithyClient._json,
        roleArn: [],
    });
};
const se_DeploymentLifecycleHookList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DeploymentLifecycleHook(entry);
    });
};
const se_HookDetails = (input, context) => {
    return input;
};
const se_InstanceLaunchTemplate = (input, context) => {
    return smithyClient.take(input, {
        ec2InstanceProfileArn: [],
        instanceRequirements: (_) => se_InstanceRequirementsRequest(_),
        monitoring: [],
        networkConfiguration: smithyClient._json,
        storageConfiguration: smithyClient._json,
    });
};
const se_InstanceLaunchTemplateUpdate = (input, context) => {
    return smithyClient.take(input, {
        ec2InstanceProfileArn: [],
        instanceRequirements: (_) => se_InstanceRequirementsRequest(_),
        monitoring: [],
        networkConfiguration: smithyClient._json,
        storageConfiguration: smithyClient._json,
    });
};
const se_InstanceRequirementsRequest = (input, context) => {
    return smithyClient.take(input, {
        acceleratorCount: smithyClient._json,
        acceleratorManufacturers: smithyClient._json,
        acceleratorNames: smithyClient._json,
        acceleratorTotalMemoryMiB: smithyClient._json,
        acceleratorTypes: smithyClient._json,
        allowedInstanceTypes: smithyClient._json,
        bareMetal: [],
        baselineEbsBandwidthMbps: smithyClient._json,
        burstablePerformance: [],
        cpuManufacturers: smithyClient._json,
        excludedInstanceTypes: smithyClient._json,
        instanceGenerations: smithyClient._json,
        localStorage: [],
        localStorageTypes: smithyClient._json,
        maxSpotPriceAsPercentageOfOptimalOnDemandPrice: [],
        memoryGiBPerVCpu: (_) => se_MemoryGiBPerVCpuRequest(_),
        memoryMiB: smithyClient._json,
        networkBandwidthGbps: (_) => se_NetworkBandwidthGbpsRequest(_),
        networkInterfaceCount: smithyClient._json,
        onDemandMaxPricePercentageOverLowestPrice: [],
        requireHibernateSupport: [],
        spotMaxPricePercentageOverLowestPrice: [],
        totalLocalStorageGB: (_) => se_TotalLocalStorageGBRequest(_),
        vCpuCount: smithyClient._json,
    });
};
const se_LinearConfiguration = (input, context) => {
    return smithyClient.take(input, {
        stepBakeTimeInMinutes: [],
        stepPercent: smithyClient.serializeFloat,
    });
};
const se_ListServiceDeploymentsRequest = (input, context) => {
    return smithyClient.take(input, {
        cluster: [],
        createdAt: (_) => se_CreatedAt(_),
        maxResults: [],
        nextToken: [],
        service: [],
        status: smithyClient._json,
    });
};
const se_MemoryGiBPerVCpuRequest = (input, context) => {
    return smithyClient.take(input, {
        max: smithyClient.serializeFloat,
        min: smithyClient.serializeFloat,
    });
};
const se_NetworkBandwidthGbpsRequest = (input, context) => {
    return smithyClient.take(input, {
        max: smithyClient.serializeFloat,
        min: smithyClient.serializeFloat,
    });
};
const se_RegisterContainerInstanceRequest = (input, context) => {
    return smithyClient.take(input, {
        attributes: smithyClient._json,
        cluster: [],
        containerInstanceArn: [],
        instanceIdentityDocument: [],
        instanceIdentityDocumentSignature: [],
        platformDevices: smithyClient._json,
        tags: smithyClient._json,
        totalResources: (_) => se_Resources(_),
        versionInfo: smithyClient._json,
    });
};
const se_Resource = (input, context) => {
    return smithyClient.take(input, {
        doubleValue: smithyClient.serializeFloat,
        integerValue: [],
        longValue: [],
        name: [],
        stringSetValue: smithyClient._json,
        type: [],
    });
};
const se_Resources = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Resource(entry);
    });
};
const se_RunTaskRequest = (input, context) => {
    return smithyClient.take(input, {
        capacityProviderStrategy: smithyClient._json,
        clientToken: [true, (_) => _ ?? uuid.v4()],
        cluster: [],
        count: [],
        enableECSManagedTags: [],
        enableExecuteCommand: [],
        group: [],
        launchType: [],
        networkConfiguration: smithyClient._json,
        overrides: smithyClient._json,
        placementConstraints: smithyClient._json,
        placementStrategy: smithyClient._json,
        platformVersion: [],
        propagateTags: [],
        referenceId: [],
        startedBy: [],
        tags: smithyClient._json,
        taskDefinition: [],
        volumeConfigurations: smithyClient._json,
    });
};
const se_Scale = (input, context) => {
    return smithyClient.take(input, {
        unit: [],
        value: smithyClient.serializeFloat,
    });
};
const se_SubmitTaskStateChangeRequest = (input, context) => {
    return smithyClient.take(input, {
        attachments: smithyClient._json,
        cluster: [],
        containers: smithyClient._json,
        executionStoppedAt: (_) => _.getTime() / 1_000,
        managedAgents: smithyClient._json,
        pullStartedAt: (_) => _.getTime() / 1_000,
        pullStoppedAt: (_) => _.getTime() / 1_000,
        reason: [],
        status: [],
        task: [],
    });
};
const se_TotalLocalStorageGBRequest = (input, context) => {
    return smithyClient.take(input, {
        max: smithyClient.serializeFloat,
        min: smithyClient.serializeFloat,
    });
};
const se_UpdateCapacityProviderRequest = (input, context) => {
    return smithyClient.take(input, {
        autoScalingGroupProvider: smithyClient._json,
        cluster: [],
        managedInstancesProvider: (_) => se_UpdateManagedInstancesProviderConfiguration(_),
        name: [],
    });
};
const se_UpdateManagedInstancesProviderConfiguration = (input, context) => {
    return smithyClient.take(input, {
        infrastructureRoleArn: [],
        instanceLaunchTemplate: (_) => se_InstanceLaunchTemplateUpdate(_),
        propagateTags: [],
    });
};
const se_UpdateServiceRequest = (input, context) => {
    return smithyClient.take(input, {
        availabilityZoneRebalancing: [],
        capacityProviderStrategy: smithyClient._json,
        cluster: [],
        deploymentConfiguration: (_) => se_DeploymentConfiguration(_),
        deploymentController: smithyClient._json,
        desiredCount: [],
        enableECSManagedTags: [],
        enableExecuteCommand: [],
        forceNewDeployment: [],
        healthCheckGracePeriodSeconds: [],
        loadBalancers: smithyClient._json,
        networkConfiguration: smithyClient._json,
        placementConstraints: smithyClient._json,
        placementStrategy: smithyClient._json,
        platformVersion: [],
        propagateTags: [],
        service: [],
        serviceConnectConfiguration: smithyClient._json,
        serviceRegistries: smithyClient._json,
        taskDefinition: [],
        volumeConfigurations: smithyClient._json,
        vpcLatticeConfigurations: smithyClient._json,
    });
};
const se_UpdateTaskSetRequest = (input, context) => {
    return smithyClient.take(input, {
        cluster: [],
        scale: (_) => se_Scale(_),
        service: [],
        taskSet: [],
    });
};
const de_CanaryConfiguration = (output, context) => {
    return smithyClient.take(output, {
        canaryBakeTimeInMinutes: smithyClient.expectInt32,
        canaryPercent: smithyClient.limitedParseDouble,
    });
};
const de_CapacityProvider = (output, context) => {
    return smithyClient.take(output, {
        autoScalingGroupProvider: smithyClient._json,
        capacityProviderArn: smithyClient.expectString,
        cluster: smithyClient.expectString,
        managedInstancesProvider: (_) => de_ManagedInstancesProvider(_),
        name: smithyClient.expectString,
        status: smithyClient.expectString,
        tags: smithyClient._json,
        type: smithyClient.expectString,
        updateStatus: smithyClient.expectString,
        updateStatusReason: smithyClient.expectString,
    });
};
const de_CapacityProviders = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityProvider(entry);
    });
    return retVal;
};
const de_Container = (output, context) => {
    return smithyClient.take(output, {
        containerArn: smithyClient.expectString,
        cpu: smithyClient.expectString,
        exitCode: smithyClient.expectInt32,
        gpuIds: smithyClient._json,
        healthStatus: smithyClient.expectString,
        image: smithyClient.expectString,
        imageDigest: smithyClient.expectString,
        lastStatus: smithyClient.expectString,
        managedAgents: (_) => de_ManagedAgents(_),
        memory: smithyClient.expectString,
        memoryReservation: smithyClient.expectString,
        name: smithyClient.expectString,
        networkBindings: smithyClient._json,
        networkInterfaces: smithyClient._json,
        reason: smithyClient.expectString,
        runtimeId: smithyClient.expectString,
        taskArn: smithyClient.expectString,
    });
};
const de_ContainerInstance = (output, context) => {
    return smithyClient.take(output, {
        agentConnected: smithyClient.expectBoolean,
        agentUpdateStatus: smithyClient.expectString,
        attachments: smithyClient._json,
        attributes: smithyClient._json,
        capacityProviderName: smithyClient.expectString,
        containerInstanceArn: smithyClient.expectString,
        ec2InstanceId: smithyClient.expectString,
        healthStatus: (_) => de_ContainerInstanceHealthStatus(_),
        pendingTasksCount: smithyClient.expectInt32,
        registeredAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        registeredResources: (_) => de_Resources(_),
        remainingResources: (_) => de_Resources(_),
        runningTasksCount: smithyClient.expectInt32,
        status: smithyClient.expectString,
        statusReason: smithyClient.expectString,
        tags: smithyClient._json,
        version: smithyClient.expectLong,
        versionInfo: smithyClient._json,
    });
};
const de_ContainerInstanceHealthStatus = (output, context) => {
    return smithyClient.take(output, {
        details: (_) => de_InstanceHealthCheckResultList(_),
        overallStatus: smithyClient.expectString,
    });
};
const de_ContainerInstances = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerInstance(entry);
    });
    return retVal;
};
const de_Containers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Container(entry);
    });
    return retVal;
};
const de_CreateCapacityProviderResponse = (output, context) => {
    return smithyClient.take(output, {
        capacityProvider: (_) => de_CapacityProvider(_),
    });
};
const de_CreateServiceResponse = (output, context) => {
    return smithyClient.take(output, {
        service: (_) => de_Service(_),
    });
};
const de_CreateTaskSetResponse = (output, context) => {
    return smithyClient.take(output, {
        taskSet: (_) => de_TaskSet(_),
    });
};
const de_DeleteCapacityProviderResponse = (output, context) => {
    return smithyClient.take(output, {
        capacityProvider: (_) => de_CapacityProvider(_),
    });
};
const de_DeleteServiceResponse = (output, context) => {
    return smithyClient.take(output, {
        service: (_) => de_Service(_),
    });
};
const de_DeleteTaskDefinitionsResponse = (output, context) => {
    return smithyClient.take(output, {
        failures: smithyClient._json,
        taskDefinitions: (_) => de_TaskDefinitionList(_),
    });
};
const de_DeleteTaskSetResponse = (output, context) => {
    return smithyClient.take(output, {
        taskSet: (_) => de_TaskSet(_),
    });
};
const de_Deployment = (output, context) => {
    return smithyClient.take(output, {
        capacityProviderStrategy: smithyClient._json,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        desiredCount: smithyClient.expectInt32,
        failedTasks: smithyClient.expectInt32,
        fargateEphemeralStorage: smithyClient._json,
        id: smithyClient.expectString,
        launchType: smithyClient.expectString,
        networkConfiguration: smithyClient._json,
        pendingCount: smithyClient.expectInt32,
        platformFamily: smithyClient.expectString,
        platformVersion: smithyClient.expectString,
        rolloutState: smithyClient.expectString,
        rolloutStateReason: smithyClient.expectString,
        runningCount: smithyClient.expectInt32,
        serviceConnectConfiguration: smithyClient._json,
        serviceConnectResources: smithyClient._json,
        status: smithyClient.expectString,
        taskDefinition: smithyClient.expectString,
        updatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        volumeConfigurations: smithyClient._json,
        vpcLatticeConfigurations: smithyClient._json,
    });
};
const de_DeploymentConfiguration = (output, context) => {
    return smithyClient.take(output, {
        alarms: smithyClient._json,
        bakeTimeInMinutes: smithyClient.expectInt32,
        canaryConfiguration: (_) => de_CanaryConfiguration(_),
        deploymentCircuitBreaker: smithyClient._json,
        lifecycleHooks: (_) => de_DeploymentLifecycleHookList(_),
        linearConfiguration: (_) => de_LinearConfiguration(_),
        maximumPercent: smithyClient.expectInt32,
        minimumHealthyPercent: smithyClient.expectInt32,
        strategy: smithyClient.expectString,
    });
};
const de_DeploymentLifecycleHook = (output, context) => {
    return smithyClient.take(output, {
        hookDetails: (_) => de_HookDetails(_),
        hookTargetArn: smithyClient.expectString,
        lifecycleStages: smithyClient._json,
        roleArn: smithyClient.expectString,
    });
};
const de_DeploymentLifecycleHookList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeploymentLifecycleHook(entry);
    });
    return retVal;
};
const de_Deployments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Deployment(entry);
    });
    return retVal;
};
const de_DeregisterContainerInstanceResponse = (output, context) => {
    return smithyClient.take(output, {
        containerInstance: (_) => de_ContainerInstance(_),
    });
};
const de_DeregisterTaskDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        taskDefinition: (_) => de_TaskDefinition(_),
    });
};
const de_DescribeCapacityProvidersResponse = (output, context) => {
    return smithyClient.take(output, {
        capacityProviders: (_) => de_CapacityProviders(_),
        failures: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
};
const de_DescribeContainerInstancesResponse = (output, context) => {
    return smithyClient.take(output, {
        containerInstances: (_) => de_ContainerInstances(_),
        failures: smithyClient._json,
    });
};
const de_DescribeServiceDeploymentsResponse = (output, context) => {
    return smithyClient.take(output, {
        failures: smithyClient._json,
        serviceDeployments: (_) => de_ServiceDeployments(_),
    });
};
const de_DescribeServiceRevisionsResponse = (output, context) => {
    return smithyClient.take(output, {
        failures: smithyClient._json,
        serviceRevisions: (_) => de_ServiceRevisions(_),
    });
};
const de_DescribeServicesResponse = (output, context) => {
    return smithyClient.take(output, {
        failures: smithyClient._json,
        services: (_) => de_Services(_),
    });
};
const de_DescribeTaskDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        tags: smithyClient._json,
        taskDefinition: (_) => de_TaskDefinition(_),
    });
};
const de_DescribeTaskSetsResponse = (output, context) => {
    return smithyClient.take(output, {
        failures: smithyClient._json,
        taskSets: (_) => de_TaskSets(_),
    });
};
const de_DescribeTasksResponse = (output, context) => {
    return smithyClient.take(output, {
        failures: smithyClient._json,
        tasks: (_) => de_Tasks(_),
    });
};
const de_GetTaskProtectionResponse = (output, context) => {
    return smithyClient.take(output, {
        failures: smithyClient._json,
        protectedTasks: (_) => de_ProtectedTasks(_),
    });
};
const de_HookDetails = (output, context) => {
    return output;
};
const de_InstanceHealthCheckResult = (output, context) => {
    return smithyClient.take(output, {
        lastStatusChange: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        lastUpdated: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        status: smithyClient.expectString,
        type: smithyClient.expectString,
    });
};
const de_InstanceHealthCheckResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceHealthCheckResult(entry);
    });
    return retVal;
};
const de_InstanceLaunchTemplate = (output, context) => {
    return smithyClient.take(output, {
        ec2InstanceProfileArn: smithyClient.expectString,
        instanceRequirements: (_) => de_InstanceRequirementsRequest(_),
        monitoring: smithyClient.expectString,
        networkConfiguration: smithyClient._json,
        storageConfiguration: smithyClient._json,
    });
};
const de_InstanceRequirementsRequest = (output, context) => {
    return smithyClient.take(output, {
        acceleratorCount: smithyClient._json,
        acceleratorManufacturers: smithyClient._json,
        acceleratorNames: smithyClient._json,
        acceleratorTotalMemoryMiB: smithyClient._json,
        acceleratorTypes: smithyClient._json,
        allowedInstanceTypes: smithyClient._json,
        bareMetal: smithyClient.expectString,
        baselineEbsBandwidthMbps: smithyClient._json,
        burstablePerformance: smithyClient.expectString,
        cpuManufacturers: smithyClient._json,
        excludedInstanceTypes: smithyClient._json,
        instanceGenerations: smithyClient._json,
        localStorage: smithyClient.expectString,
        localStorageTypes: smithyClient._json,
        maxSpotPriceAsPercentageOfOptimalOnDemandPrice: smithyClient.expectInt32,
        memoryGiBPerVCpu: (_) => de_MemoryGiBPerVCpuRequest(_),
        memoryMiB: smithyClient._json,
        networkBandwidthGbps: (_) => de_NetworkBandwidthGbpsRequest(_),
        networkInterfaceCount: smithyClient._json,
        onDemandMaxPricePercentageOverLowestPrice: smithyClient.expectInt32,
        requireHibernateSupport: smithyClient.expectBoolean,
        spotMaxPricePercentageOverLowestPrice: smithyClient.expectInt32,
        totalLocalStorageGB: (_) => de_TotalLocalStorageGBRequest(_),
        vCpuCount: smithyClient._json,
    });
};
const de_LinearConfiguration = (output, context) => {
    return smithyClient.take(output, {
        stepBakeTimeInMinutes: smithyClient.expectInt32,
        stepPercent: smithyClient.limitedParseDouble,
    });
};
const de_ListServiceDeploymentsResponse = (output, context) => {
    return smithyClient.take(output, {
        nextToken: smithyClient.expectString,
        serviceDeployments: (_) => de_ServiceDeploymentsBrief(_),
    });
};
const de_ManagedAgent = (output, context) => {
    return smithyClient.take(output, {
        lastStartedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        lastStatus: smithyClient.expectString,
        name: smithyClient.expectString,
        reason: smithyClient.expectString,
    });
};
const de_ManagedAgents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ManagedAgent(entry);
    });
    return retVal;
};
const de_ManagedInstancesProvider = (output, context) => {
    return smithyClient.take(output, {
        infrastructureRoleArn: smithyClient.expectString,
        instanceLaunchTemplate: (_) => de_InstanceLaunchTemplate(_),
        propagateTags: smithyClient.expectString,
    });
};
const de_MemoryGiBPerVCpuRequest = (output, context) => {
    return smithyClient.take(output, {
        max: smithyClient.limitedParseDouble,
        min: smithyClient.limitedParseDouble,
    });
};
const de_NetworkBandwidthGbpsRequest = (output, context) => {
    return smithyClient.take(output, {
        max: smithyClient.limitedParseDouble,
        min: smithyClient.limitedParseDouble,
    });
};
const de_ProtectedTask = (output, context) => {
    return smithyClient.take(output, {
        expirationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        protectionEnabled: smithyClient.expectBoolean,
        taskArn: smithyClient.expectString,
    });
};
const de_ProtectedTasks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProtectedTask(entry);
    });
    return retVal;
};
const de_RegisterContainerInstanceResponse = (output, context) => {
    return smithyClient.take(output, {
        containerInstance: (_) => de_ContainerInstance(_),
    });
};
const de_RegisterTaskDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        tags: smithyClient._json,
        taskDefinition: (_) => de_TaskDefinition(_),
    });
};
const de_Resource = (output, context) => {
    return smithyClient.take(output, {
        doubleValue: smithyClient.limitedParseDouble,
        integerValue: smithyClient.expectInt32,
        longValue: smithyClient.expectLong,
        name: smithyClient.expectString,
        stringSetValue: smithyClient._json,
        type: smithyClient.expectString,
    });
};
const de_Resources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Resource(entry);
    });
    return retVal;
};
const de_Rollback = (output, context) => {
    return smithyClient.take(output, {
        reason: smithyClient.expectString,
        serviceRevisionArn: smithyClient.expectString,
        startedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_RunTaskResponse = (output, context) => {
    return smithyClient.take(output, {
        failures: smithyClient._json,
        tasks: (_) => de_Tasks(_),
    });
};
const de_Scale = (output, context) => {
    return smithyClient.take(output, {
        unit: smithyClient.expectString,
        value: smithyClient.limitedParseDouble,
    });
};
const de_Service = (output, context) => {
    return smithyClient.take(output, {
        availabilityZoneRebalancing: smithyClient.expectString,
        capacityProviderStrategy: smithyClient._json,
        clusterArn: smithyClient.expectString,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        createdBy: smithyClient.expectString,
        deploymentConfiguration: (_) => de_DeploymentConfiguration(_),
        deploymentController: smithyClient._json,
        deployments: (_) => de_Deployments(_),
        desiredCount: smithyClient.expectInt32,
        enableECSManagedTags: smithyClient.expectBoolean,
        enableExecuteCommand: smithyClient.expectBoolean,
        events: (_) => de_ServiceEvents(_),
        healthCheckGracePeriodSeconds: smithyClient.expectInt32,
        launchType: smithyClient.expectString,
        loadBalancers: smithyClient._json,
        networkConfiguration: smithyClient._json,
        pendingCount: smithyClient.expectInt32,
        placementConstraints: smithyClient._json,
        placementStrategy: smithyClient._json,
        platformFamily: smithyClient.expectString,
        platformVersion: smithyClient.expectString,
        propagateTags: smithyClient.expectString,
        roleArn: smithyClient.expectString,
        runningCount: smithyClient.expectInt32,
        schedulingStrategy: smithyClient.expectString,
        serviceArn: smithyClient.expectString,
        serviceName: smithyClient.expectString,
        serviceRegistries: smithyClient._json,
        status: smithyClient.expectString,
        tags: smithyClient._json,
        taskDefinition: smithyClient.expectString,
        taskSets: (_) => de_TaskSets(_),
    });
};
const de_ServiceDeployment = (output, context) => {
    return smithyClient.take(output, {
        alarms: smithyClient._json,
        clusterArn: smithyClient.expectString,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        deploymentCircuitBreaker: smithyClient._json,
        deploymentConfiguration: (_) => de_DeploymentConfiguration(_),
        finishedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        lifecycleStage: smithyClient.expectString,
        rollback: (_) => de_Rollback(_),
        serviceArn: smithyClient.expectString,
        serviceDeploymentArn: smithyClient.expectString,
        sourceServiceRevisions: (_) => de_ServiceRevisionsSummaryList(_),
        startedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        status: smithyClient.expectString,
        statusReason: smithyClient.expectString,
        stoppedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        targetServiceRevision: (_) => de_ServiceRevisionSummary(_),
        updatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_ServiceDeploymentBrief = (output, context) => {
    return smithyClient.take(output, {
        clusterArn: smithyClient.expectString,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        finishedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        serviceArn: smithyClient.expectString,
        serviceDeploymentArn: smithyClient.expectString,
        startedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        status: smithyClient.expectString,
        statusReason: smithyClient.expectString,
        targetServiceRevisionArn: smithyClient.expectString,
    });
};
const de_ServiceDeployments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceDeployment(entry);
    });
    return retVal;
};
const de_ServiceDeploymentsBrief = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceDeploymentBrief(entry);
    });
    return retVal;
};
const de_ServiceEvent = (output, context) => {
    return smithyClient.take(output, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        id: smithyClient.expectString,
        message: smithyClient.expectString,
    });
};
const de_ServiceEvents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceEvent(entry);
    });
    return retVal;
};
const de_ServiceRevision = (output, context) => {
    return smithyClient.take(output, {
        capacityProviderStrategy: smithyClient._json,
        clusterArn: smithyClient.expectString,
        containerImages: smithyClient._json,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        fargateEphemeralStorage: smithyClient._json,
        guardDutyEnabled: smithyClient.expectBoolean,
        launchType: smithyClient.expectString,
        loadBalancers: smithyClient._json,
        networkConfiguration: smithyClient._json,
        platformFamily: smithyClient.expectString,
        platformVersion: smithyClient.expectString,
        resolvedConfiguration: smithyClient._json,
        serviceArn: smithyClient.expectString,
        serviceConnectConfiguration: smithyClient._json,
        serviceRegistries: smithyClient._json,
        serviceRevisionArn: smithyClient.expectString,
        taskDefinition: smithyClient.expectString,
        volumeConfigurations: smithyClient._json,
        vpcLatticeConfigurations: smithyClient._json,
    });
};
const de_ServiceRevisions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceRevision(entry);
    });
    return retVal;
};
const de_ServiceRevisionsSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceRevisionSummary(entry);
    });
    return retVal;
};
const de_ServiceRevisionSummary = (output, context) => {
    return smithyClient.take(output, {
        arn: smithyClient.expectString,
        pendingTaskCount: smithyClient.expectInt32,
        requestedProductionTrafficWeight: smithyClient.limitedParseDouble,
        requestedTaskCount: smithyClient.expectInt32,
        requestedTestTrafficWeight: smithyClient.limitedParseDouble,
        runningTaskCount: smithyClient.expectInt32,
    });
};
const de_Services = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Service(entry);
    });
    return retVal;
};
const de_StartTaskResponse = (output, context) => {
    return smithyClient.take(output, {
        failures: smithyClient._json,
        tasks: (_) => de_Tasks(_),
    });
};
const de_StopTaskResponse = (output, context) => {
    return smithyClient.take(output, {
        task: (_) => de_Task(_),
    });
};
const de_Task = (output, context) => {
    return smithyClient.take(output, {
        attachments: smithyClient._json,
        attributes: smithyClient._json,
        availabilityZone: smithyClient.expectString,
        capacityProviderName: smithyClient.expectString,
        clusterArn: smithyClient.expectString,
        connectivity: smithyClient.expectString,
        connectivityAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        containerInstanceArn: smithyClient.expectString,
        containers: (_) => de_Containers(_),
        cpu: smithyClient.expectString,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        desiredStatus: smithyClient.expectString,
        enableExecuteCommand: smithyClient.expectBoolean,
        ephemeralStorage: smithyClient._json,
        executionStoppedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        fargateEphemeralStorage: smithyClient._json,
        group: smithyClient.expectString,
        healthStatus: smithyClient.expectString,
        inferenceAccelerators: smithyClient._json,
        lastStatus: smithyClient.expectString,
        launchType: smithyClient.expectString,
        memory: smithyClient.expectString,
        overrides: smithyClient._json,
        platformFamily: smithyClient.expectString,
        platformVersion: smithyClient.expectString,
        pullStartedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        pullStoppedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        startedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        startedBy: smithyClient.expectString,
        stopCode: smithyClient.expectString,
        stoppedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        stoppedReason: smithyClient.expectString,
        stoppingAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        tags: smithyClient._json,
        taskArn: smithyClient.expectString,
        taskDefinitionArn: smithyClient.expectString,
        version: smithyClient.expectLong,
    });
};
const de_TaskDefinition = (output, context) => {
    return smithyClient.take(output, {
        compatibilities: smithyClient._json,
        containerDefinitions: smithyClient._json,
        cpu: smithyClient.expectString,
        deregisteredAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        enableFaultInjection: smithyClient.expectBoolean,
        ephemeralStorage: smithyClient._json,
        executionRoleArn: smithyClient.expectString,
        family: smithyClient.expectString,
        inferenceAccelerators: smithyClient._json,
        ipcMode: smithyClient.expectString,
        memory: smithyClient.expectString,
        networkMode: smithyClient.expectString,
        pidMode: smithyClient.expectString,
        placementConstraints: smithyClient._json,
        proxyConfiguration: smithyClient._json,
        registeredAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        registeredBy: smithyClient.expectString,
        requiresAttributes: smithyClient._json,
        requiresCompatibilities: smithyClient._json,
        revision: smithyClient.expectInt32,
        runtimePlatform: smithyClient._json,
        status: smithyClient.expectString,
        taskDefinitionArn: smithyClient.expectString,
        taskRoleArn: smithyClient.expectString,
        volumes: smithyClient._json,
    });
};
const de_TaskDefinitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TaskDefinition(entry);
    });
    return retVal;
};
const de_Tasks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Task(entry);
    });
    return retVal;
};
const de_TaskSet = (output, context) => {
    return smithyClient.take(output, {
        capacityProviderStrategy: smithyClient._json,
        clusterArn: smithyClient.expectString,
        computedDesiredCount: smithyClient.expectInt32,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        externalId: smithyClient.expectString,
        fargateEphemeralStorage: smithyClient._json,
        id: smithyClient.expectString,
        launchType: smithyClient.expectString,
        loadBalancers: smithyClient._json,
        networkConfiguration: smithyClient._json,
        pendingCount: smithyClient.expectInt32,
        platformFamily: smithyClient.expectString,
        platformVersion: smithyClient.expectString,
        runningCount: smithyClient.expectInt32,
        scale: (_) => de_Scale(_),
        serviceArn: smithyClient.expectString,
        serviceRegistries: smithyClient._json,
        stabilityStatus: smithyClient.expectString,
        stabilityStatusAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        startedBy: smithyClient.expectString,
        status: smithyClient.expectString,
        tags: smithyClient._json,
        taskDefinition: smithyClient.expectString,
        taskSetArn: smithyClient.expectString,
        updatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_TaskSets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TaskSet(entry);
    });
    return retVal;
};
const de_TotalLocalStorageGBRequest = (output, context) => {
    return smithyClient.take(output, {
        max: smithyClient.limitedParseDouble,
        min: smithyClient.limitedParseDouble,
    });
};
const de_UpdateCapacityProviderResponse = (output, context) => {
    return smithyClient.take(output, {
        capacityProvider: (_) => de_CapacityProvider(_),
    });
};
const de_UpdateContainerAgentResponse = (output, context) => {
    return smithyClient.take(output, {
        containerInstance: (_) => de_ContainerInstance(_),
    });
};
const de_UpdateContainerInstancesStateResponse = (output, context) => {
    return smithyClient.take(output, {
        containerInstances: (_) => de_ContainerInstances(_),
        failures: smithyClient._json,
    });
};
const de_UpdateServicePrimaryTaskSetResponse = (output, context) => {
    return smithyClient.take(output, {
        taskSet: (_) => de_TaskSet(_),
    });
};
const de_UpdateServiceResponse = (output, context) => {
    return smithyClient.take(output, {
        service: (_) => de_Service(_),
    });
};
const de_UpdateTaskProtectionResponse = (output, context) => {
    return smithyClient.take(output, {
        failures: smithyClient._json,
        protectedTasks: (_) => de_ProtectedTasks(_),
    });
};
const de_UpdateTaskSetResponse = (output, context) => {
    return smithyClient.take(output, {
        taskSet: (_) => de_TaskSet(_),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(ECSServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AmazonEC2ContainerServiceV20141113.${operation}`,
    };
}

class CreateCapacityProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "CreateCapacityProvider", {})
    .n("ECSClient", "CreateCapacityProviderCommand")
    .f(void 0, void 0)
    .ser(se_CreateCapacityProviderCommand)
    .de(de_CreateCapacityProviderCommand)
    .build() {
}

class CreateClusterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "CreateCluster", {})
    .n("ECSClient", "CreateClusterCommand")
    .f(void 0, void 0)
    .ser(se_CreateClusterCommand)
    .de(de_CreateClusterCommand)
    .build() {
}

class CreateServiceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "CreateService", {})
    .n("ECSClient", "CreateServiceCommand")
    .f(void 0, void 0)
    .ser(se_CreateServiceCommand)
    .de(de_CreateServiceCommand)
    .build() {
}

class CreateTaskSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "CreateTaskSet", {})
    .n("ECSClient", "CreateTaskSetCommand")
    .f(void 0, void 0)
    .ser(se_CreateTaskSetCommand)
    .de(de_CreateTaskSetCommand)
    .build() {
}

class DeleteAccountSettingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DeleteAccountSetting", {})
    .n("ECSClient", "DeleteAccountSettingCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAccountSettingCommand)
    .de(de_DeleteAccountSettingCommand)
    .build() {
}

class DeleteAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DeleteAttributes", {})
    .n("ECSClient", "DeleteAttributesCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAttributesCommand)
    .de(de_DeleteAttributesCommand)
    .build() {
}

class DeleteCapacityProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DeleteCapacityProvider", {})
    .n("ECSClient", "DeleteCapacityProviderCommand")
    .f(void 0, void 0)
    .ser(se_DeleteCapacityProviderCommand)
    .de(de_DeleteCapacityProviderCommand)
    .build() {
}

class DeleteClusterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DeleteCluster", {})
    .n("ECSClient", "DeleteClusterCommand")
    .f(void 0, void 0)
    .ser(se_DeleteClusterCommand)
    .de(de_DeleteClusterCommand)
    .build() {
}

class DeleteServiceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DeleteService", {})
    .n("ECSClient", "DeleteServiceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteServiceCommand)
    .de(de_DeleteServiceCommand)
    .build() {
}

class DeleteTaskDefinitionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DeleteTaskDefinitions", {})
    .n("ECSClient", "DeleteTaskDefinitionsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTaskDefinitionsCommand)
    .de(de_DeleteTaskDefinitionsCommand)
    .build() {
}

class DeleteTaskSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DeleteTaskSet", {})
    .n("ECSClient", "DeleteTaskSetCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTaskSetCommand)
    .de(de_DeleteTaskSetCommand)
    .build() {
}

class DeregisterContainerInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DeregisterContainerInstance", {})
    .n("ECSClient", "DeregisterContainerInstanceCommand")
    .f(void 0, void 0)
    .ser(se_DeregisterContainerInstanceCommand)
    .de(de_DeregisterContainerInstanceCommand)
    .build() {
}

class DeregisterTaskDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DeregisterTaskDefinition", {})
    .n("ECSClient", "DeregisterTaskDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DeregisterTaskDefinitionCommand)
    .de(de_DeregisterTaskDefinitionCommand)
    .build() {
}

class DescribeCapacityProvidersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DescribeCapacityProviders", {})
    .n("ECSClient", "DescribeCapacityProvidersCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCapacityProvidersCommand)
    .de(de_DescribeCapacityProvidersCommand)
    .build() {
}

class DescribeClustersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DescribeClusters", {})
    .n("ECSClient", "DescribeClustersCommand")
    .f(void 0, void 0)
    .ser(se_DescribeClustersCommand)
    .de(de_DescribeClustersCommand)
    .build() {
}

class DescribeContainerInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DescribeContainerInstances", {})
    .n("ECSClient", "DescribeContainerInstancesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeContainerInstancesCommand)
    .de(de_DescribeContainerInstancesCommand)
    .build() {
}

class DescribeServiceDeploymentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DescribeServiceDeployments", {})
    .n("ECSClient", "DescribeServiceDeploymentsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeServiceDeploymentsCommand)
    .de(de_DescribeServiceDeploymentsCommand)
    .build() {
}

class DescribeServiceRevisionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DescribeServiceRevisions", {})
    .n("ECSClient", "DescribeServiceRevisionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeServiceRevisionsCommand)
    .de(de_DescribeServiceRevisionsCommand)
    .build() {
}

class DescribeServicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DescribeServices", {})
    .n("ECSClient", "DescribeServicesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeServicesCommand)
    .de(de_DescribeServicesCommand)
    .build() {
}

class DescribeTaskDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DescribeTaskDefinition", {})
    .n("ECSClient", "DescribeTaskDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTaskDefinitionCommand)
    .de(de_DescribeTaskDefinitionCommand)
    .build() {
}

class DescribeTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DescribeTasks", {})
    .n("ECSClient", "DescribeTasksCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTasksCommand)
    .de(de_DescribeTasksCommand)
    .build() {
}

class DescribeTaskSetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DescribeTaskSets", {})
    .n("ECSClient", "DescribeTaskSetsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTaskSetsCommand)
    .de(de_DescribeTaskSetsCommand)
    .build() {
}

class DiscoverPollEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "DiscoverPollEndpoint", {})
    .n("ECSClient", "DiscoverPollEndpointCommand")
    .f(void 0, void 0)
    .ser(se_DiscoverPollEndpointCommand)
    .de(de_DiscoverPollEndpointCommand)
    .build() {
}

class ExecuteCommandCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ExecuteCommand", {})
    .n("ECSClient", "ExecuteCommandCommand")
    .f(void 0, ExecuteCommandResponseFilterSensitiveLog)
    .ser(se_ExecuteCommandCommand)
    .de(de_ExecuteCommandCommand)
    .build() {
}

class GetTaskProtectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "GetTaskProtection", {})
    .n("ECSClient", "GetTaskProtectionCommand")
    .f(void 0, void 0)
    .ser(se_GetTaskProtectionCommand)
    .de(de_GetTaskProtectionCommand)
    .build() {
}

class ListAccountSettingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ListAccountSettings", {})
    .n("ECSClient", "ListAccountSettingsCommand")
    .f(void 0, void 0)
    .ser(se_ListAccountSettingsCommand)
    .de(de_ListAccountSettingsCommand)
    .build() {
}

class ListAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ListAttributes", {})
    .n("ECSClient", "ListAttributesCommand")
    .f(void 0, void 0)
    .ser(se_ListAttributesCommand)
    .de(de_ListAttributesCommand)
    .build() {
}

class ListClustersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ListClusters", {})
    .n("ECSClient", "ListClustersCommand")
    .f(void 0, void 0)
    .ser(se_ListClustersCommand)
    .de(de_ListClustersCommand)
    .build() {
}

class ListContainerInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ListContainerInstances", {})
    .n("ECSClient", "ListContainerInstancesCommand")
    .f(void 0, void 0)
    .ser(se_ListContainerInstancesCommand)
    .de(de_ListContainerInstancesCommand)
    .build() {
}

class ListServiceDeploymentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ListServiceDeployments", {})
    .n("ECSClient", "ListServiceDeploymentsCommand")
    .f(void 0, void 0)
    .ser(se_ListServiceDeploymentsCommand)
    .de(de_ListServiceDeploymentsCommand)
    .build() {
}

class ListServicesByNamespaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ListServicesByNamespace", {})
    .n("ECSClient", "ListServicesByNamespaceCommand")
    .f(void 0, void 0)
    .ser(se_ListServicesByNamespaceCommand)
    .de(de_ListServicesByNamespaceCommand)
    .build() {
}

class ListServicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ListServices", {})
    .n("ECSClient", "ListServicesCommand")
    .f(void 0, void 0)
    .ser(se_ListServicesCommand)
    .de(de_ListServicesCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ListTagsForResource", {})
    .n("ECSClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListTaskDefinitionFamiliesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ListTaskDefinitionFamilies", {})
    .n("ECSClient", "ListTaskDefinitionFamiliesCommand")
    .f(void 0, void 0)
    .ser(se_ListTaskDefinitionFamiliesCommand)
    .de(de_ListTaskDefinitionFamiliesCommand)
    .build() {
}

class ListTaskDefinitionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ListTaskDefinitions", {})
    .n("ECSClient", "ListTaskDefinitionsCommand")
    .f(void 0, void 0)
    .ser(se_ListTaskDefinitionsCommand)
    .de(de_ListTaskDefinitionsCommand)
    .build() {
}

class ListTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "ListTasks", {})
    .n("ECSClient", "ListTasksCommand")
    .f(void 0, void 0)
    .ser(se_ListTasksCommand)
    .de(de_ListTasksCommand)
    .build() {
}

class PutAccountSettingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "PutAccountSetting", {})
    .n("ECSClient", "PutAccountSettingCommand")
    .f(void 0, void 0)
    .ser(se_PutAccountSettingCommand)
    .de(de_PutAccountSettingCommand)
    .build() {
}

class PutAccountSettingDefaultCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "PutAccountSettingDefault", {})
    .n("ECSClient", "PutAccountSettingDefaultCommand")
    .f(void 0, void 0)
    .ser(se_PutAccountSettingDefaultCommand)
    .de(de_PutAccountSettingDefaultCommand)
    .build() {
}

class PutAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "PutAttributes", {})
    .n("ECSClient", "PutAttributesCommand")
    .f(void 0, void 0)
    .ser(se_PutAttributesCommand)
    .de(de_PutAttributesCommand)
    .build() {
}

class PutClusterCapacityProvidersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "PutClusterCapacityProviders", {})
    .n("ECSClient", "PutClusterCapacityProvidersCommand")
    .f(void 0, void 0)
    .ser(se_PutClusterCapacityProvidersCommand)
    .de(de_PutClusterCapacityProvidersCommand)
    .build() {
}

class RegisterContainerInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "RegisterContainerInstance", {})
    .n("ECSClient", "RegisterContainerInstanceCommand")
    .f(void 0, void 0)
    .ser(se_RegisterContainerInstanceCommand)
    .de(de_RegisterContainerInstanceCommand)
    .build() {
}

class RegisterTaskDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "RegisterTaskDefinition", {})
    .n("ECSClient", "RegisterTaskDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_RegisterTaskDefinitionCommand)
    .de(de_RegisterTaskDefinitionCommand)
    .build() {
}

class RunTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "RunTask", {})
    .n("ECSClient", "RunTaskCommand")
    .f(void 0, void 0)
    .ser(se_RunTaskCommand)
    .de(de_RunTaskCommand)
    .build() {
}

class StartTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "StartTask", {})
    .n("ECSClient", "StartTaskCommand")
    .f(void 0, void 0)
    .ser(se_StartTaskCommand)
    .de(de_StartTaskCommand)
    .build() {
}

class StopServiceDeploymentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "StopServiceDeployment", {})
    .n("ECSClient", "StopServiceDeploymentCommand")
    .f(void 0, void 0)
    .ser(se_StopServiceDeploymentCommand)
    .de(de_StopServiceDeploymentCommand)
    .build() {
}

class StopTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "StopTask", {})
    .n("ECSClient", "StopTaskCommand")
    .f(void 0, void 0)
    .ser(se_StopTaskCommand)
    .de(de_StopTaskCommand)
    .build() {
}

class SubmitAttachmentStateChangesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "SubmitAttachmentStateChanges", {})
    .n("ECSClient", "SubmitAttachmentStateChangesCommand")
    .f(void 0, void 0)
    .ser(se_SubmitAttachmentStateChangesCommand)
    .de(de_SubmitAttachmentStateChangesCommand)
    .build() {
}

class SubmitContainerStateChangeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "SubmitContainerStateChange", {})
    .n("ECSClient", "SubmitContainerStateChangeCommand")
    .f(void 0, void 0)
    .ser(se_SubmitContainerStateChangeCommand)
    .de(de_SubmitContainerStateChangeCommand)
    .build() {
}

class SubmitTaskStateChangeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "SubmitTaskStateChange", {})
    .n("ECSClient", "SubmitTaskStateChangeCommand")
    .f(void 0, void 0)
    .ser(se_SubmitTaskStateChangeCommand)
    .de(de_SubmitTaskStateChangeCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "TagResource", {})
    .n("ECSClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "UntagResource", {})
    .n("ECSClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateCapacityProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "UpdateCapacityProvider", {})
    .n("ECSClient", "UpdateCapacityProviderCommand")
    .f(void 0, void 0)
    .ser(se_UpdateCapacityProviderCommand)
    .de(de_UpdateCapacityProviderCommand)
    .build() {
}

class UpdateClusterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "UpdateCluster", {})
    .n("ECSClient", "UpdateClusterCommand")
    .f(void 0, void 0)
    .ser(se_UpdateClusterCommand)
    .de(de_UpdateClusterCommand)
    .build() {
}

class UpdateClusterSettingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "UpdateClusterSettings", {})
    .n("ECSClient", "UpdateClusterSettingsCommand")
    .f(void 0, void 0)
    .ser(se_UpdateClusterSettingsCommand)
    .de(de_UpdateClusterSettingsCommand)
    .build() {
}

class UpdateContainerAgentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "UpdateContainerAgent", {})
    .n("ECSClient", "UpdateContainerAgentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContainerAgentCommand)
    .de(de_UpdateContainerAgentCommand)
    .build() {
}

class UpdateContainerInstancesStateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "UpdateContainerInstancesState", {})
    .n("ECSClient", "UpdateContainerInstancesStateCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContainerInstancesStateCommand)
    .de(de_UpdateContainerInstancesStateCommand)
    .build() {
}

class UpdateServiceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "UpdateService", {})
    .n("ECSClient", "UpdateServiceCommand")
    .f(void 0, void 0)
    .ser(se_UpdateServiceCommand)
    .de(de_UpdateServiceCommand)
    .build() {
}

class UpdateServicePrimaryTaskSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "UpdateServicePrimaryTaskSet", {})
    .n("ECSClient", "UpdateServicePrimaryTaskSetCommand")
    .f(void 0, void 0)
    .ser(se_UpdateServicePrimaryTaskSetCommand)
    .de(de_UpdateServicePrimaryTaskSetCommand)
    .build() {
}

class UpdateTaskProtectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "UpdateTaskProtection", {})
    .n("ECSClient", "UpdateTaskProtectionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateTaskProtectionCommand)
    .de(de_UpdateTaskProtectionCommand)
    .build() {
}

class UpdateTaskSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerServiceV20141113", "UpdateTaskSet", {})
    .n("ECSClient", "UpdateTaskSetCommand")
    .f(void 0, void 0)
    .ser(se_UpdateTaskSetCommand)
    .de(de_UpdateTaskSetCommand)
    .build() {
}

const commands = {
    CreateCapacityProviderCommand,
    CreateClusterCommand,
    CreateServiceCommand,
    CreateTaskSetCommand,
    DeleteAccountSettingCommand,
    DeleteAttributesCommand,
    DeleteCapacityProviderCommand,
    DeleteClusterCommand,
    DeleteServiceCommand,
    DeleteTaskDefinitionsCommand,
    DeleteTaskSetCommand,
    DeregisterContainerInstanceCommand,
    DeregisterTaskDefinitionCommand,
    DescribeCapacityProvidersCommand,
    DescribeClustersCommand,
    DescribeContainerInstancesCommand,
    DescribeServiceDeploymentsCommand,
    DescribeServiceRevisionsCommand,
    DescribeServicesCommand,
    DescribeTaskDefinitionCommand,
    DescribeTasksCommand,
    DescribeTaskSetsCommand,
    DiscoverPollEndpointCommand,
    ExecuteCommandCommand,
    GetTaskProtectionCommand,
    ListAccountSettingsCommand,
    ListAttributesCommand,
    ListClustersCommand,
    ListContainerInstancesCommand,
    ListServiceDeploymentsCommand,
    ListServicesCommand,
    ListServicesByNamespaceCommand,
    ListTagsForResourceCommand,
    ListTaskDefinitionFamiliesCommand,
    ListTaskDefinitionsCommand,
    ListTasksCommand,
    PutAccountSettingCommand,
    PutAccountSettingDefaultCommand,
    PutAttributesCommand,
    PutClusterCapacityProvidersCommand,
    RegisterContainerInstanceCommand,
    RegisterTaskDefinitionCommand,
    RunTaskCommand,
    StartTaskCommand,
    StopServiceDeploymentCommand,
    StopTaskCommand,
    SubmitAttachmentStateChangesCommand,
    SubmitContainerStateChangeCommand,
    SubmitTaskStateChangeCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateCapacityProviderCommand,
    UpdateClusterCommand,
    UpdateClusterSettingsCommand,
    UpdateContainerAgentCommand,
    UpdateContainerInstancesStateCommand,
    UpdateServiceCommand,
    UpdateServicePrimaryTaskSetCommand,
    UpdateTaskProtectionCommand,
    UpdateTaskSetCommand,
};
class ECS extends ECSClient {
}
smithyClient.createAggregatedClient(commands, ECS);

const paginateListAccountSettings = core.createPaginator(ECSClient, ListAccountSettingsCommand, "nextToken", "nextToken", "maxResults");

const paginateListAttributes = core.createPaginator(ECSClient, ListAttributesCommand, "nextToken", "nextToken", "maxResults");

const paginateListClusters = core.createPaginator(ECSClient, ListClustersCommand, "nextToken", "nextToken", "maxResults");

const paginateListContainerInstances = core.createPaginator(ECSClient, ListContainerInstancesCommand, "nextToken", "nextToken", "maxResults");

const paginateListServicesByNamespace = core.createPaginator(ECSClient, ListServicesByNamespaceCommand, "nextToken", "nextToken", "maxResults");

const paginateListServices = core.createPaginator(ECSClient, ListServicesCommand, "nextToken", "nextToken", "maxResults");

const paginateListTaskDefinitionFamilies = core.createPaginator(ECSClient, ListTaskDefinitionFamiliesCommand, "nextToken", "nextToken", "maxResults");

const paginateListTaskDefinitions = core.createPaginator(ECSClient, ListTaskDefinitionsCommand, "nextToken", "nextToken", "maxResults");

const paginateListTasks = core.createPaginator(ECSClient, ListTasksCommand, "nextToken", "nextToken", "maxResults");

const checkState$3 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeServicesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.failures);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.reason;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "MISSING") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.services);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.status;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "INACTIVE") {
                    return { state: utilWaiter.WaiterState.SUCCESS, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForServicesInactive = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$3);
};
const waitUntilServicesInactive = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$3);
    return utilWaiter.checkExceptions(result);
};

const checkState$2 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeServicesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.failures);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.reason;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "MISSING") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.services);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.status;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "DRAINING") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.services);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.status;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "INACTIVE") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const filterRes_2 = result.services.filter((element_1) => {
                    return !(element_1.deployments.length == 1.0 && element_1.runningCount == element_1.desiredCount);
                });
                return filterRes_2.length == 0.0;
            };
            if (returnComparator() == true) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForServicesStable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$2);
};
const waitUntilServicesStable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$2);
    return utilWaiter.checkExceptions(result);
};

const checkState$1 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeTasksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.tasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.lastStatus;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "STOPPED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.failures);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.reason;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "MISSING") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.tasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.lastStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "RUNNING";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForTasksRunning = async (params, input) => {
    const serviceDefaults = { minDelay: 6, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
};
const waitUntilTasksRunning = async (params, input) => {
    const serviceDefaults = { minDelay: 6, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
    return utilWaiter.checkExceptions(result);
};

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeTasksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.tasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.lastStatus;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "STOPPED";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForTasksStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 6, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilTasksStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 6, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AcceleratorManufacturer = AcceleratorManufacturer;
exports.AcceleratorName = AcceleratorName;
exports.AcceleratorType = AcceleratorType;
exports.AccessDeniedException = AccessDeniedException;
exports.AgentUpdateStatus = AgentUpdateStatus;
exports.ApplicationProtocol = ApplicationProtocol;
exports.AssignPublicIp = AssignPublicIp;
exports.AttributeLimitExceededException = AttributeLimitExceededException;
exports.AvailabilityZoneRebalancing = AvailabilityZoneRebalancing;
exports.BareMetal = BareMetal;
exports.BlockedException = BlockedException;
exports.BurstablePerformance = BurstablePerformance;
exports.CPUArchitecture = CPUArchitecture;
exports.CapacityProviderField = CapacityProviderField;
exports.CapacityProviderStatus = CapacityProviderStatus;
exports.CapacityProviderType = CapacityProviderType;
exports.CapacityProviderUpdateStatus = CapacityProviderUpdateStatus;
exports.ClientException = ClientException;
exports.ClusterContainsCapacityProviderException = ClusterContainsCapacityProviderException;
exports.ClusterContainsContainerInstancesException = ClusterContainsContainerInstancesException;
exports.ClusterContainsServicesException = ClusterContainsServicesException;
exports.ClusterContainsTasksException = ClusterContainsTasksException;
exports.ClusterField = ClusterField;
exports.ClusterNotFoundException = ClusterNotFoundException;
exports.ClusterSettingName = ClusterSettingName;
exports.Compatibility = Compatibility;
exports.ConflictException = ConflictException;
exports.Connectivity = Connectivity;
exports.ContainerCondition = ContainerCondition;
exports.ContainerInstanceField = ContainerInstanceField;
exports.ContainerInstanceStatus = ContainerInstanceStatus;
exports.CpuManufacturer = CpuManufacturer;
exports.CreateCapacityProviderCommand = CreateCapacityProviderCommand;
exports.CreateClusterCommand = CreateClusterCommand;
exports.CreateServiceCommand = CreateServiceCommand;
exports.CreateTaskSetCommand = CreateTaskSetCommand;
exports.DeleteAccountSettingCommand = DeleteAccountSettingCommand;
exports.DeleteAttributesCommand = DeleteAttributesCommand;
exports.DeleteCapacityProviderCommand = DeleteCapacityProviderCommand;
exports.DeleteClusterCommand = DeleteClusterCommand;
exports.DeleteServiceCommand = DeleteServiceCommand;
exports.DeleteTaskDefinitionsCommand = DeleteTaskDefinitionsCommand;
exports.DeleteTaskSetCommand = DeleteTaskSetCommand;
exports.DeploymentControllerType = DeploymentControllerType;
exports.DeploymentLifecycleHookStage = DeploymentLifecycleHookStage;
exports.DeploymentRolloutState = DeploymentRolloutState;
exports.DeploymentStrategy = DeploymentStrategy;
exports.DeregisterContainerInstanceCommand = DeregisterContainerInstanceCommand;
exports.DeregisterTaskDefinitionCommand = DeregisterTaskDefinitionCommand;
exports.DescribeCapacityProvidersCommand = DescribeCapacityProvidersCommand;
exports.DescribeClustersCommand = DescribeClustersCommand;
exports.DescribeContainerInstancesCommand = DescribeContainerInstancesCommand;
exports.DescribeServiceDeploymentsCommand = DescribeServiceDeploymentsCommand;
exports.DescribeServiceRevisionsCommand = DescribeServiceRevisionsCommand;
exports.DescribeServicesCommand = DescribeServicesCommand;
exports.DescribeTaskDefinitionCommand = DescribeTaskDefinitionCommand;
exports.DescribeTaskSetsCommand = DescribeTaskSetsCommand;
exports.DescribeTasksCommand = DescribeTasksCommand;
exports.DesiredStatus = DesiredStatus;
exports.DeviceCgroupPermission = DeviceCgroupPermission;
exports.DiscoverPollEndpointCommand = DiscoverPollEndpointCommand;
exports.EBSResourceType = EBSResourceType;
exports.ECS = ECS;
exports.ECSClient = ECSClient;
exports.ECSServiceException = ECSServiceException;
exports.EFSAuthorizationConfigIAM = EFSAuthorizationConfigIAM;
exports.EFSTransitEncryption = EFSTransitEncryption;
exports.EnvironmentFileType = EnvironmentFileType;
exports.ExecuteCommandCommand = ExecuteCommandCommand;
exports.ExecuteCommandLogging = ExecuteCommandLogging;
exports.ExecuteCommandResponseFilterSensitiveLog = ExecuteCommandResponseFilterSensitiveLog;
exports.FirelensConfigurationType = FirelensConfigurationType;
exports.GetTaskProtectionCommand = GetTaskProtectionCommand;
exports.HealthStatus = HealthStatus;
exports.InstanceGeneration = InstanceGeneration;
exports.InstanceHealthCheckState = InstanceHealthCheckState;
exports.InstanceHealthCheckType = InstanceHealthCheckType;
exports.InvalidParameterException = InvalidParameterException;
exports.IpcMode = IpcMode;
exports.LaunchType = LaunchType;
exports.LimitExceededException = LimitExceededException;
exports.ListAccountSettingsCommand = ListAccountSettingsCommand;
exports.ListAttributesCommand = ListAttributesCommand;
exports.ListClustersCommand = ListClustersCommand;
exports.ListContainerInstancesCommand = ListContainerInstancesCommand;
exports.ListServiceDeploymentsCommand = ListServiceDeploymentsCommand;
exports.ListServicesByNamespaceCommand = ListServicesByNamespaceCommand;
exports.ListServicesCommand = ListServicesCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListTaskDefinitionFamiliesCommand = ListTaskDefinitionFamiliesCommand;
exports.ListTaskDefinitionsCommand = ListTaskDefinitionsCommand;
exports.ListTasksCommand = ListTasksCommand;
exports.LocalStorage = LocalStorage;
exports.LocalStorageType = LocalStorageType;
exports.LogDriver = LogDriver;
exports.ManagedAgentName = ManagedAgentName;
exports.ManagedDraining = ManagedDraining;
exports.ManagedInstancesMonitoringOptions = ManagedInstancesMonitoringOptions;
exports.ManagedScalingStatus = ManagedScalingStatus;
exports.ManagedTerminationProtection = ManagedTerminationProtection;
exports.MissingVersionException = MissingVersionException;
exports.NamespaceNotFoundException = NamespaceNotFoundException;
exports.NetworkMode = NetworkMode;
exports.NoUpdateAvailableException = NoUpdateAvailableException;
exports.OSFamily = OSFamily;
exports.PidMode = PidMode;
exports.PlacementConstraintType = PlacementConstraintType;
exports.PlacementStrategyType = PlacementStrategyType;
exports.PlatformDeviceType = PlatformDeviceType;
exports.PlatformTaskDefinitionIncompatibilityException = PlatformTaskDefinitionIncompatibilityException;
exports.PlatformUnknownException = PlatformUnknownException;
exports.PropagateMITags = PropagateMITags;
exports.PropagateTags = PropagateTags;
exports.ProxyConfigurationType = ProxyConfigurationType;
exports.PutAccountSettingCommand = PutAccountSettingCommand;
exports.PutAccountSettingDefaultCommand = PutAccountSettingDefaultCommand;
exports.PutAttributesCommand = PutAttributesCommand;
exports.PutClusterCapacityProvidersCommand = PutClusterCapacityProvidersCommand;
exports.RegisterContainerInstanceCommand = RegisterContainerInstanceCommand;
exports.RegisterTaskDefinitionCommand = RegisterTaskDefinitionCommand;
exports.ResourceInUseException = ResourceInUseException;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ResourceType = ResourceType;
exports.RunTaskCommand = RunTaskCommand;
exports.ScaleUnit = ScaleUnit;
exports.SchedulingStrategy = SchedulingStrategy;
exports.Scope = Scope;
exports.ServerException = ServerException;
exports.ServiceConnectAccessLoggingFormat = ServiceConnectAccessLoggingFormat;
exports.ServiceConnectIncludeQueryParameters = ServiceConnectIncludeQueryParameters;
exports.ServiceDeploymentLifecycleStage = ServiceDeploymentLifecycleStage;
exports.ServiceDeploymentNotFoundException = ServiceDeploymentNotFoundException;
exports.ServiceDeploymentRollbackMonitorsStatus = ServiceDeploymentRollbackMonitorsStatus;
exports.ServiceDeploymentStatus = ServiceDeploymentStatus;
exports.ServiceField = ServiceField;
exports.ServiceNotActiveException = ServiceNotActiveException;
exports.ServiceNotFoundException = ServiceNotFoundException;
exports.SessionFilterSensitiveLog = SessionFilterSensitiveLog;
exports.SettingName = SettingName;
exports.SettingType = SettingType;
exports.SortOrder = SortOrder;
exports.StabilityStatus = StabilityStatus;
exports.StartTaskCommand = StartTaskCommand;
exports.StopServiceDeploymentCommand = StopServiceDeploymentCommand;
exports.StopServiceDeploymentStopType = StopServiceDeploymentStopType;
exports.StopTaskCommand = StopTaskCommand;
exports.SubmitAttachmentStateChangesCommand = SubmitAttachmentStateChangesCommand;
exports.SubmitContainerStateChangeCommand = SubmitContainerStateChangeCommand;
exports.SubmitTaskStateChangeCommand = SubmitTaskStateChangeCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.TargetNotConnectedException = TargetNotConnectedException;
exports.TargetNotFoundException = TargetNotFoundException;
exports.TargetType = TargetType;
exports.TaskDefinitionFamilyStatus = TaskDefinitionFamilyStatus;
exports.TaskDefinitionField = TaskDefinitionField;
exports.TaskDefinitionPlacementConstraintType = TaskDefinitionPlacementConstraintType;
exports.TaskDefinitionStatus = TaskDefinitionStatus;
exports.TaskField = TaskField;
exports.TaskFilesystemType = TaskFilesystemType;
exports.TaskSetField = TaskSetField;
exports.TaskSetNotFoundException = TaskSetNotFoundException;
exports.TaskStopCode = TaskStopCode;
exports.TransportProtocol = TransportProtocol;
exports.UlimitName = UlimitName;
exports.UnsupportedFeatureException = UnsupportedFeatureException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateCapacityProviderCommand = UpdateCapacityProviderCommand;
exports.UpdateClusterCommand = UpdateClusterCommand;
exports.UpdateClusterSettingsCommand = UpdateClusterSettingsCommand;
exports.UpdateContainerAgentCommand = UpdateContainerAgentCommand;
exports.UpdateContainerInstancesStateCommand = UpdateContainerInstancesStateCommand;
exports.UpdateInProgressException = UpdateInProgressException;
exports.UpdateServiceCommand = UpdateServiceCommand;
exports.UpdateServicePrimaryTaskSetCommand = UpdateServicePrimaryTaskSetCommand;
exports.UpdateTaskProtectionCommand = UpdateTaskProtectionCommand;
exports.UpdateTaskSetCommand = UpdateTaskSetCommand;
exports.VersionConsistency = VersionConsistency;
exports.paginateListAccountSettings = paginateListAccountSettings;
exports.paginateListAttributes = paginateListAttributes;
exports.paginateListClusters = paginateListClusters;
exports.paginateListContainerInstances = paginateListContainerInstances;
exports.paginateListServices = paginateListServices;
exports.paginateListServicesByNamespace = paginateListServicesByNamespace;
exports.paginateListTaskDefinitionFamilies = paginateListTaskDefinitionFamilies;
exports.paginateListTaskDefinitions = paginateListTaskDefinitions;
exports.paginateListTasks = paginateListTasks;
exports.waitForServicesInactive = waitForServicesInactive;
exports.waitForServicesStable = waitForServicesStable;
exports.waitForTasksRunning = waitForTasksRunning;
exports.waitForTasksStopped = waitForTasksStopped;
exports.waitUntilServicesInactive = waitUntilServicesInactive;
exports.waitUntilServicesStable = waitUntilServicesStable;
exports.waitUntilTasksRunning = waitUntilTasksRunning;
exports.waitUntilTasksStopped = waitUntilTasksStopped;
